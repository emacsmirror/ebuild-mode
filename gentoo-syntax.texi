\input texinfo.tex    @c -*-texinfo-*-
@comment %**start of header
@setfilename gentoo-syntax.info
@settitle Major mode for Ebuilds, Eclasses and Eselect modules in Gentoo
@c %**end of header

@copying
This manual is for gentoo-syntax, which is a major mode for ebuild,
eclass and eselect module files.

Copyright @copyright{} 2009 Gentoo Foundation

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License version 2.
@end quotation
@end copying

@dircategory Gentoo
@dircategory Emacs
@direntry
* gentoo-syntax: (gentoo-syntax).         Describing a mode for ebuilds, eclasses and eselect modules
@end direntry


@titlepage
@title gentoo-syntax 1.13
@subtitle Major mode for Gentoo files
@author Christian Faulhammer
@page
@insertcopying
@end titlepage

@node Top

@contents

@top gentoo-syntax: An introduction
This collection of modes will help the user to efficiently write and
edit ebuilds, eclasses and eselect modules which are special to Gentoo,
a meta-distribution with various targets (Linux distribution, prefixed
environments in other operating systems, and integration of other
kernels and userlands like the BSDs).

Ebuilds describe the build process and dependencies of a software
package to automatically compile and install it under the control of a
package manager.  They are simple text files, based on Bash shell
scripts and there easy to create.  Eclasses are comparable to a library
which provides generic functions that a set of ebuilds can use by
sourcing it on request.

Eselect is a framework to set one out of many alternatives as the
default value or to activate many out of many choices.  An example is to
choose the version of GNU Emacs called by the @code{/usr/bin/emacs}
program.  Those modules are also near to Bash.

gentoo-syntax provides two modes to edit the above three file types:
Ebuild (Eclass) mode and Eselect mode.  Other features are the execution
of often needed functions (like KEYWORDS manipulation) or fast-track
creation of new ebuilds by skeleton support.

@menu
* Functions:: What gentoo-syntax provides
* ebuild-mode:: What gentoo-syntax provides
* eclass-mode:: What gentoo-syntax provides
* eselect-mode:: What gentoo-syntax provides
@end menu

@node Functions, ebuild-mode, Top, Top
@chapter Available functionality
Two packages are available for installation:
@code{app-emacs/gentoo-syntax} and @code{app-xemacs/gentoo-syntax}
(there is support for GNU Emacs and XEmacs from the same source).  When
installed through the normal package management in Gentoo and proper
configuration of Emacs, gentoo-syntax loads the appropriate mode on
opening files with the extensions @code{.ebuild}, @code{.eclass} and
@code{.eselect}.  As the ebuild format is based on the Bash syntax,
sh-mode is called as a base, where ebuild specific things are
added/changed on top.

If font-locking is enabled, keywords are highlighted, both the standard
set available from vanilla Portage and special functions from all common
eclasses.  Missing highlighting should be reported on
@code{http://bugs.gentoo.org/}.

Generally all functionality is reachable through direct function calls,
keybindings (described later) and menu entries, if the latter is
activated.  So every user has the choice for his/her preferred way of
interfacing with Emacs.

@node ebuild-mode, eclass-mode, Functions, Top
@chapter Describing ebuild-mode
@section Writing a new ebuild
Starting a completely new ebuild from scratch is best done by inserting
an ebuild skeleton.  The function @code{ebuild-mode-skeleton} does this
for you and can be called via @kbd{C-c C-n}.  You are prompted for the
always needed information, while having the possibility to give more
than one item (in LICENSE for example) and choose via tab completion
from the possible choices.  Giving an empty input on items, that are not
mandatory, will remove it from the buffer.  After that adding custom
modifications is simple and straightforward.

@section Keywording
In ebuild-mode an interface to manipulation of the KEYWORDS variable is
provided in two different ways:
@enumerate
@item
Prompt for actions with tab completion or
@item
ekeyword syntax.
@end enumerate

The first function is called @code{ebuild-mode-keyword} (bound to
@kbd{C-c C-k}) and initially asks for the action to take which is one
out of
@table @code
@item drop
Remove the architecture entirely.
@item mask
State with a prefixed minus sign that the architecture is definitely not
supported.
@item stable
Mark as stable.
@item unstable
Mark as testing.
@end table

After choosing the action the architectures to handle need to be chosen.
Tab completion is available for all possible architectures.

Using the ekeyword syntax for the @code{ebuild-mode-ekeyword} function
(@kbd{C-c C-y} as keybinding) is equal what you can pass as argument to
said utility from the @code{app-portage/gentoolkit-dev} package:
@table @code
@item ^<arch>
Remove the architecture entirely.
@item -<arch>
State with a prefixed minus sign that the architecture is definitely not
supported.
@item <arch>
Mark as stable.
@item ~<arch>
Mark as testing.
@end table
It is possible to use @code{all} instead of an individual architecture
which works on all currently available architectures for the ebuild.

Handy for version/revision bumps is to mark all architectures from a
copied stable ebuild as testing.  Either the @code{all} placeholder for
the ekeyword syntax can be used or the keyboard shortcut @kbd{C-c C-b}
(calling the @code{ebuild-mode-all-keywords-unstable} function).

@section Testing and interfacing with Portage

Apart from the normal external program calls via @kbd{M-!}, ebuild-mode
provides a direct interface to the ebuild utility found in the Portage
program suite.  @kbd{C-c C-e} calls @code{ebuild-run-command} which asks
for one of the possible actions as argument.  See the man page of ebuild
what actions are provided.

Creating a ChangeLog entry via the echangelog program from
@code{app-portage/gentoolkit-dev} is achieved via
@code{ebuild-run-echangelog} or @kbd{C-c C-a}.  Only type in the desired
text, formatting, time stamps and changed files are added automatically.

@section Keybindings
@table @kbd
@item C-c C-n
Insert a skeleton ebuild contents, with prompts for desired eclass
inclusions, licenses and USE flags.
@item C-c C-k
Keywording is done via prompts that narrows down your choices which
architectures to mark as testing, dropped among other things.
@item C-c C-y
Generate architecture keywords with the syntax from the ekeyword tool.
@item C-c C-b
Mark all architectures as testing.  Handy for version/revision bumps.
@item C-c C-e
Run Portage's ebuild command, you are prompted for the phase you want.
@item C-c C-a
Create a ChangeLog entry.
@end table

@node eclass-mode, eselect-mode, ebuild-mode, Top
@chapter Describing eclass-mode
There is no special eclass-mode but ebuild-mode is used without the
functions that make no sense in eclasses.

@node eselect-mode, ,eclass-mode, Top
@chapter Describing eselect-mode
This mode only supports highlighting of special eselect keywords.
@bye
